// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ClusterGen
#pragma enable_d3d11_debug_symbols
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"

struct ClusterBox
{
    float3 p0, p1, p2, p3, p4, p5, p6, p7;
};

float4x4 _viewProjMat;
float4x4 _viewProjMatInv;
float _numClusterX;
float _numClusterY;
float _numClusterZ;

RWStructuredBuffer<ClusterBox> _clusterBuffer;

//  int3 SV_GroupID 当前线程所在的线程组的ID，取值范围为(0,0,0)到(gX-1,gY-1,gZ-1)
//  int3 SV_GroupThreadID 当前线程在线程组中的ID，取值范围为(0,0,0)到(tX-1,tY-1,tZ-1)
//  int3 SV_DispatchThreadID 当前线程在所有线程组的ID，取值范围为(0,0,0)到(gX*tX-1, gY*tY-1, gZ*tZ-1)
//  uint3 SV_GroupIndex 当前线程在所在线程组内的下标，取值范围为0到tX*tY*tZ-1

float3 PosTransform(float4x4 mat, float3 pos)
{
    float4 v4 = float4(pos, 1.0);
    v4 = mul(mat, v4);
    v4 /= v4.w;
    return v4.xyz;
}

uint Index3DTo1D(uint3 index)
{
    return index.z * _numClusterX * _numClusterY + index.y * _numClusterX + index.x;
}

[numthreads(16,16,1)]
void ClusterGen(int3 threadId : SV_GroupThreadID, int3 groupId : SV_GroupID)
{
    uint i = threadId.x, j = threadId.y, k = groupId.x;
    uint3 clusterId_3D = uint3(i, j, k);
    uint clusterId_1D = Index3DTo1D(clusterId_3D);

    // NDC cluster
    float xmin = i / _numClusterX * 2 - 1;
    float xmax = (i + 1) / _numClusterX * 2 - 1;
    float ymin = j / _numClusterY * 2 - 1;
    float ymax = (j + 1) / _numClusterY * 2 - 1;
    float zmin = k / _numClusterZ;
    float zmax = (k + 1) / _numClusterZ;

    float3 p0 = PosTransform(_viewProjMatInv, float3(xmin, ymin, 1));
    float3 p1 = PosTransform(_viewProjMatInv, float3(xmin, ymin, 0));
    float3 p2 = PosTransform(_viewProjMatInv, float3(xmin, ymax, 1));
    float3 p3 = PosTransform(_viewProjMatInv, float3(xmin, ymax, 0));
    float3 p4 = PosTransform(_viewProjMatInv, float3(xmax, ymin, 1));
    float3 p5 = PosTransform(_viewProjMatInv, float3(xmax, ymin, 0));
    float3 p6 = PosTransform(_viewProjMatInv, float3(xmax, ymax, 1));
    float3 p7 = PosTransform(_viewProjMatInv, float3(xmax, ymax, 0));

    ClusterBox cluster;
    cluster.p0 = p0 + zmin * (p1 - p0);
    cluster.p1 = p0 + zmax * (p1 - p0);
    cluster.p2 = p2 + zmin * (p3 - p2);
    cluster.p3 = p2 + zmax * (p3 - p2);
    cluster.p4 = p4 + zmin * (p5 - p4);
    cluster.p5 = p4 + zmax * (p5 - p4);
    cluster.p6 = p6 + zmin * (p7 - p6);
    cluster.p7 = p6 + zmax * (p7 - p6);

    _clusterBuffer[clusterId_1D] = cluster;
}
